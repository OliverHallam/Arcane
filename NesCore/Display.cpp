#include "Display.h"

Display::Display()
{
    VBlank();
}

uint32_t Display::GetPixel(uint8_t paletteIndex, uint8_t emphasis)
{
    return Palette[emphasis][paletteIndex];
}

uint32_t* Display::GetScanlinePtr()
{
    return currentPixelAddress_;
}

uint32_t* Display::GetScanlinePtr(int32_t scanline)
{
    return &buffer_[scanline * WIDTH];
}

void Display::HBlank()
{
    currentPixelAddress_ += WIDTH;
}

void Display::VBlank()
{
    currentPixelAddress_ = &buffer_[0];
}

const uint32_t* Display::Buffer() const
{
    return &buffer_[0];
}

// palette was generated with bisqwit's tool (https://bisqwit.iki.fi/utils/nespalette.php)
std::array<std::array<uint32_t, 64>, 8> Display::Palette
{
    {
        {
            0x525252, 0x011a51, 0x0f0f65, 0x230663,
            0x36034b, 0x400426, 0x3f0904, 0x321300,
            0x1f2000, 0x0b2a00, 0x002f00, 0x002e0a,
            0x00262d, 0x000000, 0x000000, 0x000000,
            0xa0a0a0, 0x1e4a9d, 0x3837bc, 0x5828b8,
            0x752194, 0x84235c, 0x822e24, 0x6f3f00,
            0x515200, 0x316300, 0x1a6b05, 0x0e692e,
            0x105c68, 0x000000, 0x000000, 0x000000,
            0xfeffff, 0x699efc, 0x8987ff, 0xae76ff,
            0xce6df1, 0xe070b2, 0xde7c70, 0xc8913e,
            0xa6a725, 0x81ba28, 0x63c446, 0x54c17d,
            0x56b3c0, 0x3c3c3c, 0x000000, 0x000000,
            0xfeffff, 0xbed6fd, 0xccccff, 0xddc4ff,
            0xeac0f9, 0xf2c1df, 0xf1c7c2, 0xe8d0aa,
            0xd9da9d, 0xc9e29e, 0xbce6ae, 0xb4e5c7,
            0xb5dfe4, 0xa9a9a9, 0x000000, 0x000000
        },
        {
            0x4b3432, 0x00072e, 0x0b0141, 0x1d0042,
            0x300031, 0x3b0016, 0x3d0300, 0x2f0900,
            0x1c1000, 0x091600, 0x001800, 0x001500,
            0x000d11, 0x000000, 0x000000, 0x000000,
            0x94716c, 0x172767, 0x301c84, 0x4f1385,
            0x6b116b, 0x7c1541, 0x7e2116, 0x6a2c00,
            0x4c3800, 0x2d4200, 0x164500, 0x0a4010,
            0x083239, 0x000000, 0x000000, 0x000000,
            0xeebcb5, 0x5d67b0, 0x7c59cf, 0xa04fd1,
            0xc04bb4, 0xd35184, 0xd66051, 0xbf6d25,
            0x9d7b0f, 0x79870e, 0x5c8a22, 0x4b8449,
            0x49757b, 0x362321, 0x000000, 0x000000,
            0xeebcb5, 0xaf98b3, 0xbd91c0, 0xcd8dc0,
            0xdb8bb5, 0xe38ea1, 0xe4948a, 0xda9a75,
            0xcca169, 0xbca569, 0xafa774, 0xa7a486,
            0xa69e9d, 0x9d7873, 0x000000, 0x000000
        },
        {
            0x2e4527, 0x00132c, 0x00073a, 0x0a0035,
            0x150020, 0x1f0008, 0x210300, 0x190d00,
            0x0c1900, 0x012500, 0x002c00, 0x002800,
            0x001f13, 0x000000, 0x000000, 0x000000,
            0x678b5c, 0x083d64, 0x182a79, 0x2d1a72,
            0x401251, 0x501629, 0x522204, 0x463400,
            0x314800, 0x1c5900, 0x0c6400, 0x025e13,
            0x01503d, 0x000000, 0x000000, 0x000000,
            0xaee19d, 0x3c89a6, 0x5272bd, 0x6c5fb6,
            0x815492, 0x945a64, 0x966834, 0x897e12,
            0x719504, 0x56a908, 0x42b621, 0x33af48,
            0x319f7a, 0x1e3118, 0x000000, 0x000000,
            0xaee19d, 0x7dbba1, 0x86b1aa, 0x92a9a7,
            0x9ba499, 0xa3a785, 0xa4ad70, 0x9eb75f,
            0x94c156, 0x89ca59, 0x7fcf66, 0x78cc79,
            0x77c58f, 0x6e9362, 0x000000, 0x000000
        },
        {
            0x2d2e1e, 0x000421, 0x00002f, 0x0a002d,
            0x15001d, 0x1f0006, 0x200000, 0x180500,
            0x0b0c00, 0x001300, 0x001600, 0x001300,
            0x000b0c, 0x000000, 0x000000, 0x000000,
            0x66664d, 0x072352, 0x181767, 0x2c0e64,
            0x3f094c, 0x4f0d25, 0x511802, 0x442400,
            0x303100, 0x1b3c00, 0x0b4200, 0x013c09,
            0x002f2f, 0x000000, 0x000000, 0x000000,
            0xacac89, 0x3b5f8e, 0x5150a5, 0x6a44a2,
            0x803e87, 0x93445a, 0x95522c, 0x86600d,
            0x6e7001, 0x557d02, 0x408312, 0x317d36,
            0x2f6e66, 0x1d1d11, 0x000000, 0x000000,
            0xacac89, 0x7b8b8b, 0x858594, 0x907f93,
            0x9a7d88, 0xa17f75, 0xa28560, 0x9c8c51,
            0x929348, 0x869849, 0x7d9b53, 0x769865,
            0x75927a, 0x6c6c53, 0x000000, 0x000000
        },
        {
            0x373759, 0x000f53, 0x090868, 0x170063,
            0x24004b, 0x2a0028, 0x260007, 0x1a0300,
            0x090a00, 0x001300, 0x001a00, 0x001b0e,
            0x001731, 0x000000, 0x000001, 0x000001,
            0x7575ab, 0x1337a1, 0x2c2ac0, 0x431bb8,
            0x571394, 0x61125f, 0x5b172a, 0x482106,
            0x2c2d00, 0x173d00, 0x08480d, 0x034937,
            0x06436e, 0x000001, 0x000001, 0x000001,
            0xc2c1ff, 0x507bff, 0x6e6cff, 0x895aff,
            0xa04ff5, 0xab4dba, 0xa5547b, 0x8f614a,
            0x6f6f30, 0x558336, 0x408e55, 0x38908a,
            0x3d89ca, 0x252542, 0x000001, 0x000001,
            0xc2c1ff, 0x91a4ff, 0x9f9dff, 0xaa95ff,
            0xb490ff, 0xb98fea, 0xb692cf, 0xad98b8,
            0x9f9fab, 0x93a7ae, 0x8aacbd, 0x86add6,
            0x88aaf1, 0x7d7cb4, 0x000001, 0x000001
        },
        {
            0x322735, 0x00042f, 0x050043, 0x120041,
            0x1e0030, 0x250017, 0x240001, 0x180000,
            0x080600, 0x000c00, 0x000f00, 0x000e00,
            0x000a12, 0x000000, 0x000000, 0x000000,
            0x6d5b73, 0x0d2169, 0x251686, 0x3b0d84,
            0x4f096a, 0x5a0a43, 0x58101b, 0x451a00,
            0x2a2600, 0x153000, 0x063600, 0x003414,
            0x012c3b, 0x000000, 0x000000, 0x000000,
            0xb69dbe, 0x455ab4, 0x634cd4, 0x7d40d1,
            0x943bb5, 0xa03c88, 0x9f4559, 0x89512c,
            0x695f15, 0x506c16, 0x3c722b, 0x317051,
            0x33677f, 0x211824, 0x000000, 0x000000,
            0xb69dbe, 0x8581ba, 0x937ac7, 0x9e75c6,
            0xa872ba, 0xad73a8, 0xac7793, 0xa37d7e,
            0x958371, 0x8a8872, 0x818b7d, 0x7c8a8f,
            0x7c86a3, 0x73627a, 0x000000, 0x000000
        },
        {
            0x242f30, 0x000a2f, 0x00033d, 0x070039,
            0x120023, 0x19000c, 0x180000, 0x100100,
            0x050800, 0x001100, 0x001700, 0x001601,
            0x001117, 0x000000, 0x000000, 0x000000,
            0x57686a, 0x042d68, 0x14207e, 0x281277,
            0x3b0a56, 0x450b30, 0x44120c, 0x371d00,
            0x232900, 0x0f3900, 0x024401, 0x00421c,
            0x003943, 0x000000, 0x000000, 0x000000,
            0x97afb2, 0x336bb0, 0x485cc8, 0x614ac0,
            0x773f9b, 0x834170, 0x814a43, 0x725821,
            0x5b6711, 0x427a16, 0x2f8631, 0x258457,
            0x277a86, 0x161e20, 0x000000, 0x000000,
            0x97afb2, 0x6b92b1, 0x758cbb, 0x8083b8,
            0x897fa9, 0x8e7f96, 0x8e8382, 0x888a72,
            0x7e9169, 0x73996c, 0x6a9e7a, 0x659d8b,
            0x6599a0, 0x5d6e71, 0x000000, 0x000000
        },
        {
            0x252525, 0x000323, 0x000031, 0x07002f,
            0x120020, 0x190009, 0x180000, 0x100000,
            0x050500, 0x000b00, 0x000f00, 0x000e00,
            0x00090d, 0x000000, 0x000000, 0x000000,
            0x585858, 0x051f56, 0x14136b, 0x280a68,
            0x3b0650, 0x45072b, 0x440e08, 0x371800,
            0x242400, 0x102f00, 0x023500, 0x00330e,
            0x002b32, 0x000000, 0x000000, 0x000000,
            0x989898, 0x335696, 0x4847ac, 0x613caa,
            0x77368f, 0x833864, 0x814038, 0x734e18,
            0x5c5d09, 0x43690a, 0x30701d, 0x266e40,
            0x27646d, 0x161616, 0x000000, 0x000000,
            0x989898, 0x6c7c97, 0x7675a0, 0x81709f,
            0x8a6d94, 0x8f6e82, 0x8e726e, 0x88785e,
            0x7e7f56, 0x738457, 0x6a8761, 0x658672,
            0x668286, 0x5e5e5e, 0x000000, 0x000000
        }
    }
};

/* Famicom Titler RGB palette
std::array<uint32_t, 64> Display::Palette
{
    0x7C7C7C,
    0x0000FC,
    0x0000BC,
    0x4428BC,
    0x940084,
    0xA80020,
    0xA81000,
    0x881400,
    0x503000,
    0x007800,
    0x006800,
    0x005800,
    0x004058,
    0x000000,
    0x000000,
    0x000000,
    0xBCBCBC,
    0x0078F8,
    0x0058F8,
    0x6844FC,
    0xD800CC,
    0xE40058,
    0xF83800,
    0xE45C10,
    0xAC7C00,
    0x00B800,
    0x00A800,
    0x00A844,
    0x008888,
    0x000000,
    0x000000,
    0x000000,
    0xF8F8F8,
    0x3CBCFC,
    0x6888FC,
    0x9878F8,
    0xF878F8,
    0xF85898,
    0xF87858,
    0xFCA044,
    0xF8B800,
    0xB8F818,
    0x58D854,
    0x58F898,
    0x00E8D8,
    0x787878,
    0x000000,
    0x000000,
    0xFCFCFC,
    0xA4E4FC,
    0xB8B8F8,
    0xD8B8F8,
    0xF8B8F8,
    0xF8A4C0,
    0xF0D0B0,
    0xFCE0A8,
    0xF8D878,
    0xD8F878,
    0xB8F8B8,
    0xB8F8D8,
    0x00FCFC,
    0xF8D8F8,
    0x000000,
    0x000000
};
*/
